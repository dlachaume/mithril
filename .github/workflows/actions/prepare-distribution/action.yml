name: prepare-distribution
description: |
  Package, add crates table, sign artifacts

  The artifacts for all supported environments must have been downloaded
  in "package-{EnvName}-x64" subfolders before calling this action.
inputs:
  version-name:
    description: Name of the version to package
    required: true
  download-url-base:
    description: Base url where the released distribution will be downloadable
    required: true
  gpg-secret-key:
    description: A GPG secret key to sign the distribution
    required: true
  compatibility-table:
    description: A json in which each key corresponds to a network and each value describes its compatibility
    required: true
runs:
  using: "composite"
  steps:
    - name: Package distribution (Linux-X64)
      shell: bash
      run: |
        python3 ./.github/workflows/scripts/package-distribution.py \
        --input package-Linux-X64/ \
        --dest package/ \
        --version "${{ inputs.version-name }}" \
        --target "linux-x64"

    - name: Package distribution (Linux-ARM64)
      shell: bash
      run: |
        python3 ./.github/workflows/scripts/package-distribution.py \
        --input package-Linux-ARM64/ \
        --dest package/ \
        --version "${{ inputs.version-name }}" \
        --target "linux-arm64"

    - name: Package distribution (macOS-ARM64)
      shell: bash
      run: |
        python3 ./.github/workflows/scripts/package-distribution.py \
        --input package-macOS-ARM64/ \
        --dest package/ \
        --version "${{ inputs.version-name }}" \
        --target "macos-arm64"

    - name: Package distribution (Windows-X64)
      shell: bash
      run: |
        python3 ./.github/workflows/scripts/package-distribution.py \
        --input package-Windows-X64/ \
        --dest package/ \
        --version "${{ inputs.version-name }}" \
        --target "windows-x64"

    - name: Package Explorer
      shell: bash
      run: |
        python3 ./.github/workflows/scripts/package-distribution.py \
        --input package-explorer/ \
        --dest package/ \
        --name "mithril-explorer" \
        --version "${{ inputs.version-name }}"

    - name: Prepare crates versions table
      shell: bash
      run: |
        cat > ./release-notes-addon.txt << EOF

        ## Crates Versions
        |  Crate  |  Version  |
        |---------- |-------------|
        EOF

        cargo metadata --quiet --no-deps | \
          jq -r '.packages | sort_by(.name) | .[] | select([.name] | inside(["mithril-stm", "mithril-aggregator", "mithril-client", "mithril-client-cli", "mithril-client-wasm", "mithril-signer", "mithril-common"])) | "| \(.name) | `\(.version)` |"' \
          >> ./release-notes-addon.txt

    - name: Add compatibility table
      shell: bash
      run: |
        cat >> ./release-notes-addon.txt << EOF

        ## Networks Compatibility :warning:
        |  Network  |  Compatible  |
        |---------- |:-------------:|
        EOF

        echo '${{ inputs.compatibility-table }}' \
          | jq -r 'keys_unsorted[] as $network | "| \($network) | \(.[$network]) |"' \
          >> ./release-notes-addon.txt

    - name: Add platform support table
      shell: bash
      run: |
        cat >> ./release-notes-addon.txt << EOF

        ## Platform Support

        Summary of the platforms for which pre-built binaries are provided.

        | Binary             | Linux x64 | Linux arm64 | macOS arm64 | Windows x64 |
        | ------------------ | :-------: | :---------: | :---------: | :---------: |
        | mithril-aggregator |     ✔     |   ✔ ⁽\*⁾    |     ⛔      |     ⛔      |
        | mithril-signer     |     ✔     |   ✔ ⁽\*⁾    |     ⛔      |     ⛔      |
        | mithril-client     |     ✔     |   ✔ ⁽\*⁾    |      ✔      |      ✔      |

        ⁽\*⁾⚠️ Linux arm64 builds are not guaranteed, use at your own risk.

        ### Linux Requirements
        The Linux binaries target \`glibc\`: to run them or install the \`.deb\` packages you must have \`glibc\` version \`2.35+\` installed.
        Compatible systems include, but are not limited to, \`Ubuntu 22.04+\` or \`Debian 12+\` (Bookworm)).
        EOF

    - name: Fetch the latest version of the unstable tag
      if: contains(inputs.version-name, 'unstable')
      shell: bash
      run: |
        cat >> ./release-notes-addon.txt << EOF

        ## Fetch the latest version of the \`unstable\` tag
        The \`unstable\` tag is updated with a new commit id when a new \`unstable\` release is published.
        To fetch the latest version of the unstable tag, execute the command:
        \`git tag -d unstable && git fetch origin tag unstable\`
        EOF

    - name: Download a binary asset
      shell: bash
      run: |
        cat >> ./release-notes-addon.txt << EOF

        ## Download a binary asset
        To simplify the installation and updating of Mithril binaries, we have created a one line installer that downloads and installs the Mithril binaries for you.
        This installer is available for Linux and macOS and supports the Mithril signer, Mithril aggregator, and Mithril client CLI.

        ### Examples of the one line installer

        - Download the **latest Mithril signer** in the current directory:
        \`curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/input-output-hk/mithril/refs/heads/main/mithril-install.sh | sh -s -- -c mithril-signer -d latest -p $(pwd)\`

        - Download the **latest Mithril client CLI** in the current directory:
        \`curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/input-output-hk/mithril/refs/heads/main/mithril-install.sh | sh -s -- -c mithril-client -d latest -p $(pwd)\`

        - Download the **unstable Mithril aggregator** in the current directory:
        \`curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/input-output-hk/mithril/refs/heads/main/mithril-install.sh | sh -s -- -c mithril-aggregator -d unstable -p $(pwd)\`

        - Download the **Mithril client of distribution `2445.0`** in the current directory:
        \`curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/input-output-hk/mithril/refs/heads/main/mithril-install.sh | sh -s -- -c mithril-client -d 2445.0 -p $(pwd)\`
        EOF

    # - name: Create and sign sha256 checksum
    #   shell: bash
    #   env:
    #     GPG_SECRET_KEY: ${{ inputs.gpg-secret-key }}
    #   run: ./.github/workflows/scripts/sign-distribution.sh

    # - name: Create a procedure to verify the distribution
    #   shell: bash
    #   env:
    #     GPG_SECRET_KEY: ${{ inputs.gpg-secret-key }}
    #     PROCEDURE_FILE_PATH: ./release-notes-addon.txt
    #     DOWNLOAD_URL_BASE: ${{ inputs.download-url-base }}
    #   run: ./.github/workflows/scripts/verify-distribution.sh

    - name: Download a Docker image
      shell: bash
      run: |
        cat >> ./release-notes-addon.txt << EOF

        ## Download a Docker image
        You can directly pull prebuilt Mithril Docker images:

        | Docker image       | name      | URL         |
        | ------------------ | :-------: | :---------: |
        | mithril-aggregator |     ✔     |   ghcr.io/input-output-hk/mithril-aggregator:    |
        | mithril-signer     |     ✔     |   ghcr.io/input-output-hk/mithril-signer:    |
        | mithril-client     |     ✔     |   ghcr.io/input-output-hk/mithril-client:    |
        EOF

    - name: List packaged assets
      shell: bash
      run: ls -al ./package
