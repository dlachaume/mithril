name: publish-wasm-package
description: |
  Deploy the WASM package to npm
inputs:
  dry_run:
    description: Dry run will not publish to npm, just test it.
    required: true
  package:
    description: npm package name.
    required: true
  scope:
    description: npm package scope (must not include '@' prefix).
    required: true
  tag:
    description: npm package tag.
    required: false
    default: "latest"
  access:
    description: npm package access.
    required: false
    default: "public"
  api_token: 
    description: npm API token.
    required: false

runs:
  using: "composite"
  steps:
  - name: Check npm latest version
    id: check_version
    shell: bash
    run: |
      echo "Check crate latest published version for '${{ inputs.package}}' package"
      LATEST_REMOTE_VERSION=$(npm view @${{ inputs.scope }}/${{ inputs.package }} dist-tags.${{ inputs.tag }} 2> /dev/null || true)
      LOCAL_VERSION=$(cargo metadata --quiet --no-deps | jq -r '.packages[] | select(.name=="${{ inputs.package}}") | .version')
      echo "Latest crate.io version: $LATEST_REMOTE_VERSION"
      echo "Local version: $LOCAL_VERSION"

      if [ "$LOCAL_VERSION" != "$LATEST_REMOTE_VERSION" ]; then 
        echo "Local version is newer than remote version: we will publish to npm registry"
        echo "should_deploy=true" >> $GITHUB_OUTPUT
      else
        echo "Local version and remote version are the same: no need to publish to npm registry"
        echo "should_deploy=false" >> $GITHUB_OUTPUT
      fi

  - name: Build package
    shell: bash
    run: |
      echo "Build '@${{ inputs.scope }}/${{ inputs.package }}' package"
      cp ./LICENSE ./mithril-client-wasm/
      cp -f ./mithril-client-wasm/npm/README.md ./mithril-client-wasm/
      wasm-pack build ${{ inputs.package }} --release --target web --out-dir ./pkg --scope ${{ inputs.scope }} --out-name index

  - name: List package
    shell: bash
    run: |
      echo "List '@${{ inputs.scope }}/${{ inputs.package }}' package"
      ls -al ${{ inputs.package }}/pkg

  - name: Test publish package
    if: inputs.dry_run == 'true' && steps.check_version.outputs.should_deploy == 'true'
    shell: bash
    env:
      NPM_TOKEN: ${{ inputs.api_token }}
    run: |
      echo "test publish '@${{ inputs.scope }}/${{ inputs.package }}' package"
      npm set "//registry.npmjs.org/:_authToken=${NPM_TOKEN}"
      if [ -z "${NPM_TOKEN}" -a "${{ inputs.dry_run }}" == "true" ]; then
        echo "Warning: An NPM access token is required for authentication and has not been provided."
      else
        npm whoami
      fi
      cd ${{ inputs.package }}/pkg
      npm publish --tag ${{ inputs.tag }} --access ${{ inputs.access }} --dry-run

  - name: Publish package
    if: inputs.dry_run == 'false' && steps.check_version.outputs.should_deploy == 'true'
    shell: bash
    env:
      NPM_TOKEN: ${{ inputs.api_token }}
    run: |
      echo "Publish '@${{ inputs.scope }}/${{ inputs.package }}' package"
      npm set "//registry.npmjs.org/:_authToken=${NPM_TOKEN}"
      npm whoami
      cd ${{ inputs.package }}/pkg
      npm publish --tag ${{ inputs.tag }} --access ${{ inputs.access }}
